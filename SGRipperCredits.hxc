import funkin.modding.module.Module;
import funkin.play.PauseSubState;
import flixel.FlxG;
import Std;
import flixel.text.FlxText;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import funkin.play.PlayState;
import funkin.Paths;
import funkin.Assets;
import haxe.Json;
import funkin.modding.PolymodErrorHandler;
import funkin.modding.module.ModuleHandler;

class SGRipperCredits extends Module {
	var jsonPath = Paths.json("ripsCredits"); // deta/ripsCredits.json
	var jsonData; // Shortcut to Json.parse(Assets.getText(jsonPath))
	var ripsArray:Array; // Shortcut to Json.parse(Assets.getText(jsonPath)).rips

	public function new() {
		super("SGRipperCredits", 1);
	}

	override function onSubStateOpenBegin(event) {
		var state = event.targetState;

		if (Std.isOfType(state, PauseSubState)) {
			if (PlayState.instance != null && Assets.exists(jsonPath) && PlayState.instance.currentChart != null) {
				jsonData = Json.parse(Assets.getText(jsonPath));
				ripsArray = jsonData.rips;

				state.openCallback = function() {
					if (ripsArray != null) {
						for (rip in ripsArray) {
							// To account for variations instead of using currentChart.id or currentSong.id
							if (rip.songName == PlayState.instance.currentChart.songName) {
								var ripCredit = new FlxText(20, 175 /*Right below the practice mode text*/, FlxG.width - 40);
								ripCredit.text = "Ripper: " + rip.ripper; // Will look for ripper
								ripCredit.scrollFactor.set(0, 0);
								ripCredit.setFormat(Paths.font("vcr.ttf"), 32, 0xFFffffff, "right");
								FlxTween.tween(ripCredit, {y: ripCredit.y + 5}, 1.8, {ease: FlxEase.quartOut, startDelay: 0.6 /*Will tween right after practice mode text*/});
								state.add(ripCredit);
							}
						}
					}
				}
			}
		}

		super.onSubStateOpenBegin(event);
	}
}